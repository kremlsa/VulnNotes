stages:
  - build
  - sbom-trivy
  - sbom-cdxgen
  - sbom-syft

trivy_sbom_full:
  stage: sbom-trivy
  image:
    # Для работы со старой версией циклона напрямую версию формата в триви указать нельзя
    name: aquasec/trivy:0.40.0
    entrypoint: [""]
  before_script:
    - apk add --no-cache jq
  script:
    - trivy fs --format cyclonedx --output sbomfs.json .
    - trivy rootfs --format cyclonedx --output sbomrootfs.json .
    - |
      jq -s '
        .[0] * {
          components: ((.[0].components // []) + (.[1].components // [])),
          vulnerabilities: ((.[0].vulnerabilities // []) + (.[1].vulnerabilities // []))
        }
      ' sbomfs.json sbomrootfs.json > full_sbom.json
  after_script:
    - jq --color-output . sbomfs.json | less -R
    - jq --color-output . sbomrootfs.json | less -R
    - jq --color-output . full_sbom.json | less -R
  artifacts:
    name: "full_sbom"
    paths:
      - full_sbom.json
    expire_in: 1 week



# Собираем SBOM из пакетных менеджеров с помощью CycloneDX
CycloneDX-sbom:
  stage: sbom-cdxgen
  allow_failure: true
  variables:
    GIT_STRATEGY: clone
    # Задаём версию формата отчёта, например для последующего анализа инструмент поддерживают 1.4
    CDX_SPEC_VERSION: 1.4
    REPORT_NAME: "${CI_PROJECT_NAME}_CDXV_${CDX_SPEC_VERSION}.json"
  image:
    name: ghcr.io/cyclonedx/cdxgen:latest
    entrypoint: [""]
  script:
    - |
      node /opt/cdxgen/bin/cdxgen.js \
      -t java \
      --spec-version "${CDX_SPEC_VERSION}" \
      -r . \
      -o "${REPORT_NAME}"
  artifacts:
    when: always
    paths:
      - "${REPORT_NAME}"
  # Форматированный вывод с помощью jq 
  after_script:
    - microdnf -y install jq
    - jq --color-output . ${REPORT_NAME} | less -R

syft-sbom:
  variables:
    GIT_STRATEGY: clone
    REPORT_NAME: "${CI_PROJECT_NAME}_sbom.json"
  stage: sbom-syft
  allow_failure: true
  image:
    name: docker.io/anchore/syft:debug
    entrypoint: [""]
  script: 
    - /syft dir:. -o cyclonedx-json="${REPORT_NAME}"
  after_script:
    - apk add --no-cache jq
    - jq --color-output . ${REPORT_NAME} | less -R
  artifacts:
    when: always
    paths:
      - "${REPORT_NAME}"
