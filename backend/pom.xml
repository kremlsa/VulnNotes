<?xml version="1.0" encoding="UTF-8"?>
<!-- Корневой элемент Maven POM-файла -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- Версия модели проекта -->
    <modelVersion>4.0.0</modelVersion>

    <!-- Наследование от стандартного Spring Boot родительского проекта -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/> <!-- Пусто, чтобы искать родителя в центральном репозитории Maven -->
    </parent>

    <!-- Идентификатор группы проекта (обычно доменное имя наоборот) -->
    <groupId>ssdlc.online</groupId>

    <!-- Уникальный идентификатор модуля/проекта -->
    <artifactId>backend</artifactId>

    <!-- Свойства проекта -->
    <properties>
        <!-- Переменная для отключения работы с фронтендом через профиль no-frontend -->
        <skip.frontend>false</skip.frontend>
        <start-class>vulnspa.VulnerableSpaApplication</start-class>
        <jib.target.image>docker.io/kremlsa/vulnerable-spa:latest</jib.target.image>
    </properties>

    <!-- Зависимости проекта -->
    <dependencies>

        <!-- Зависимость Spring Boot для создания REST API -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Зависимость Spring Boot для работы с базами данных через JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Зависимость Spring Boot для настройки базовой безопасности приложения -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Встраиваемая база данных H2 для разработки и тестирования -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>

        <!-- Flyway для управления миграциями базы данных -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>

        <!-- FreeMarker шаблонизатор для генерации HTML, email, XML ... -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>

        <!-- SpringBoot actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>


        <!-- Зависимости для тестирования  JUnit 5 + Mockito + Spring Test Context. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Обязательно для тестирования безопасности: Spring Security Test -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <!-- Конфигурация сборки проекта -->
    <build>
        <plugins>

            <!-- Плагин Spring Boot для упаковки приложения в исполняемый JAR -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- Плагин для работы с фронтендом (npm + react-scripts build)
            для автоматической сборки фронтенда (React) через Maven
            -->
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.12.0</version>

                <configuration>
                    <!-- Папка с фронтендом -->
                    <workingDirectory>../frontend</workingDirectory>
                    <!-- Позволяет пропускать сборку фронта через профиль -->
                    <skip>${skip.frontend}</skip>
                </configuration>

                <executions>

                    <!-- Установка Node.js и npm ЛОКАЛЬНО -->
                    <execution>
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                            <nodeVersion>v18.16.0</nodeVersion> <!-- или v20.x.x -->
                            <npmVersion>9.5.0</npmVersion>       <!-- npm подходит для Node 18 -->
                        </configuration>
                    </execution>

                    <!-- Установка npm зависимостей -->
                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>

                    <!-- Сборка фронтенда (npm run build) -->
                    <execution>
                        <id>npm run build</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <arguments>run build</arguments>
                        </configuration>
                    </execution>

                </executions>
            </plugin>


            <!-- Плагин для копирования файлов фронтенда в папку ресурсов Spring Boot -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <executions>

                    <!-- Копирование собранных фронтенд-файлов в target/classes/static -->
                    <execution>
                        <id>copy-resources-to-target</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <!-- Куда копировать -->
                            <outputDirectory>${project.build.outputDirectory}/static</outputDirectory>
                            <resources>
                                <resource>
                                    <!-- Откуда брать файлы -->
                                    <directory>../frontend/build</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <!-- Копирование собранных файлов во время разработки в src/main/resources/static -->
                    <execution>
                        <id>copy-resources-to-src</id>
                        <phase>generate-resources</phase> <!-- Ранняя стадия -->
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite> <!-- перезаписывать старые файлы -->
                            <outputDirectory>${basedir}/src/main/resources/static</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../frontend/build</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                </executions>
            </plugin>



            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>3.4.0</version>
                <configuration>
                    <from>
                        <image>eclipse-temurin:17-jre-alpine</image>
                    </from>
                    <to>
                        <image>${jib.target.image}</image>
                    </to>
                    <container>
                        <mainClass>${start-class}</mainClass>
                        <ports>
                            <port>8080</port>
                        </ports>
                        <jvmFlags>
                            <jvmFlag>-XX:+UseContainerSupport</jvmFlag>
                            <jvmFlag>-Djava.security.egd=file:/dev/./urandom</jvmFlag>
                        </jvmFlags>
                    </container>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- Профили Maven для управления параметрами сборки -->
    <profiles>
        <profile>
            <!-- Профиль без сборки фронтенда
            запускать с ключом -Pno-frontend
            -->
            <id>no-frontend</id>
            <properties>
                <!-- Пропустить стадии фронтенда -->
                <skip.frontend>true</skip.frontend>
            </properties>
        </profile>
    </profiles>

</project>
